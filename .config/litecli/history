
# 2021-10-16 06:04:04.949275
+select * from disease_site;

# 2021-10-16 06:04:09.438628
+select * from patient;

# 2021-10-16 06:04:12.129713
+.q

# 2021-10-16 06:04:14.661581
+;

# 2021-10-16 06:04:16.268274
+.exit

# 2021-10-16 06:12:03.460702
+select * from patient;

# 2021-10-16 06:12:31.264613
+insert into disease_site (name) values ('GI');

# 2021-10-16 06:12:36.702602
+insert into disease_site (name) values ('H&N');

# 2021-10-16 06:12:44.276421
+select * from disease_site;

# 2021-10-16 06:13:00.718069
+--update patient set disease_site=3 where attending=;

# 2021-10-16 06:13:08.538207
+select * from provider;

# 2021-10-16 06:13:18.214467
+update patient set disease_site=3 where attending=2;

# 2021-10-16 06:13:22.680280
+.e

# 2021-10-16 06:13:25.268027
+.exit

# 2021-10-16 06:14:08.191312
+update patient set disease_site=3 where attending=2;

# 2021-10-16 06:14:09.890782
+commit;

# 2021-10-16 06:14:17.152540
+select * from patient where disease_site=3;

# 2021-10-16 06:14:23.499356
+select count(*) from patient where disease_site=3;

# 2021-10-16 06:14:38.604371
+.q

# 2021-10-16 06:14:46.141242
+.status

# 2021-10-16 06:14:49.505194
+.exit

# 2021-10-16 06:20:29.820858
+select * from disease_site;

# 2021-10-16 06:20:35.617667
+select * from provider;

# 2021-10-16 06:20:49.645336
+update patient set disease_site=1 where attending=2;

# 2021-10-16 06:20:52.885186
+.q

# 2021-10-16 06:20:54.311338
+.e

# 2021-10-16 06:20:59.264658
+exit

# 2021-10-16 06:22:48.567594
+select distinct(attending) from patient;

# 2021-10-16 06:23:02.196358
+select count(*) from patient where attending=2;

# 2021-10-16 06:23:11.229256
+select disease_site from patient where attending=2;

# 2021-10-16 06:23:17.120755
+select * from disease_site;

# 2021-10-16 06:23:41.640748
+update patient set disease_site=3 where attending=1;

# 2021-10-16 06:23:44.856465
+.exit

# 2021-10-16 09:30:49.751486
+select * from disease_site;

# 2021-10-16 09:31:02.834070
+.q

# 2021-10-16 09:31:24.338540
+.exit

# 2021-10-16 09:31:43.068285
+.q

# 2021-10-16 09:31:45.609209
+.exit

# 2021-10-17 00:34:39.481002
+select * from disease_site;

# 2021-10-17 00:34:51.809083
+.exit

# 2021-10-17 10:46:53.341556
+select * from disease_site;

# 2021-10-17 10:46:58.919751
+select * from patient limit 1;

# 2021-10-17 10:48:15.891175
+alter table patient add column active_service NOT NULL default False;

# 2021-10-17 10:48:24.823320
+select * from patient;

# 2021-10-17 10:48:32.981058
+.e

# 2021-10-17 10:48:35.461639
+.exit\

# 2021-10-17 10:48:38.120888
+.qu

# 2021-10-17 10:48:39.594568
+.exit

# 2021-10-17 17:14:41.380139
+select * from patient limit 1;

# 2021-10-17 17:14:56.122944
+.q

# 2021-10-17 17:14:57.786124
+.exit

# 2021-10-17 17:15:25.983574
+select * from patient limit 1;

# 2021-10-17 17:15:37.681043
+select distinct(disease_site) from patient;

# 2021-10-17 17:15:45.261851
+.exit

# 2021-10-22 19:52:24.804627
+select * from patient ;

# 2021-10-22 19:52:34.436045
+.schema

# 2021-10-22 19:52:45.822113
+select * from patient limit 1;

# 2021-10-22 19:52:50.882329
+describe

# 2021-10-22 19:52:54.798178
+describe patient;

# 2021-10-22 20:16:06.461588
+.q

# 2021-10-22 20:16:09.680531
+.exit

# 2021-10-22 20:59:03.968778
+.q

# 2021-10-22 20:59:04.978921
+.e

# 2021-10-22 20:59:06.801000
+.exit

# 2021-10-22 20:59:08.479910
+.quit

# 2021-10-22 20:59:18.330022
+select * from disease_site;

# 2021-10-22 20:59:36.897987
+select * from patient where disease_site=1 limit 10;

# 2021-10-22 21:00:03.603837
+select * from patient where diagnosis like '%rectal%';

# 2021-10-22 21:00:11.084933
+select count(*) from patient where diagnosis like '%rectal%';

# 2021-10-22 21:00:21.471374
+select count(*) from patient where diagnosis like '%pancre%';

# 2021-10-22 21:00:25.510400
+select count(*) from patient where diagnosis like '%anal%';

# 2021-10-22 21:00:56.619164
+select count(*) from patient where diagnosis like '%anal%' or diagnosis like '%ectal%' or diagnosis like '%ancrea%';

# 2021-10-22 21:01:09.687911
+select count(*) from patient where diagnosis like '%anal%' or diagnosis like '%ectal%' or diagnosis like '%ancrea%' or diagnosis like '%Anal%';

# 2021-10-22 21:01:28.749362
+update patient set disease_site=2 where diagnosis like '%anal%' or diagnosis like '%ectal%' or diagnosis like '%ancrea%' or diagnosis like '%Anal%';

# 2021-10-22 21:01:31.549319
+.exit

# 2021-10-22 21:17:26.859130
+update patient set active_service = false;

# 2021-10-22 21:17:41.921516
+select * from disease_site;

# 2021-10-22 21:17:53.189477
+update patient set active_service = true where disease_site = 3;

# 2021-10-22 21:18:01.446648
+.exit

# 2021-12-31 08:30:44.662769
+select count(*) from patient;

# 2021-12-31 08:30:47.263595
+\#q

# 2021-12-31 08:30:48.111620
+\q

# 2022-01-01 07:46:33.473507
+select * from Task

# 2022-01-01 07:46:39.775785
+.q

# 2022-01-01 07:46:43.300738
+.exit

# 2022-01-01 07:54:13.021113
+select * from Task;

# 2022-01-01 07:54:20.117683
+.q

# 2022-01-01 07:54:21.501975
+.exit

# 2022-01-27 15:01:18.280290
+.schema

# 2022-01-27 15:01:38.678230
+select * from provider;

# 2022-01-27 15:01:46.624101
+select * from disease_site;

# 2022-01-27 15:01:53.872176
+select * from hospital;

# 2022-01-27 15:02:01.587867
+select * from patient_status;

# 2022-01-27 15:12:28.213709
+select * from intent;

# 2022-03-30 07:45:27.874378
+.databases

# 2022-03-30 07:45:29.436143
+.schema

# 2022-03-30 07:45:36.223502
+describe `ZMANAGEDOBJECTSTORECONNECTION`;

# 2022-03-30 07:45:40.066673
+.q

# 2022-03-30 07:45:41.217601
+.exit

# 2022-04-16 10:52:53.695130
+create table phrase (

# 2022-04-16 10:54:31.366750
+create table phrase (
+  id integer not null autoincrement,
+  abbr text unique not null,
+  phrase text not null );

# 2022-04-16 10:55:34.947570
+create table phrase (
+  id integer not null primary key autoincrement,
+  abbr text unique not null,
+  phrase text not null );

# 2022-04-16 10:56:43.554338
+insert into phrase(abbr, phrase) values ("srstech", "Frameless SRS, 11 Static Conformal Noncoplanar 3D Plan");

# 2022-04-16 10:56:49.458011
+;

# 2022-04-16 10:56:52.846576
+quit

# 2022-04-21 11:09:36.653848
+.schema

# 2022-04-21 11:10:48.411279
+update phrase set phrase="Following multidisciplinary discussion and evaluation of .HIS records, imaging, ttreatment course, and exam, we recommend SRS to the lesion as a means of
+providing durable control without the risks and longer recovery period that
+would be needed following surgical resection.  Based on the size of the lesion,
+we would like treat to 20 Gy using a frameless approach.
+" where abbr="get-phrase";

# 2022-04-21 11:11:10.461288
+select * from phrase;

# 2022-04-21 11:11:26.560536
+select * from phrase where abbr='srsplan';

# 2022-04-21 11:12:02.698450
+update phrase set phrase='Following multidisciplinary discussion and evaluation of .HIS records, imaging, treat.HIS t course, we recommend SRS to the lesion as a means of providing durable control without the risks and longer recovery period that would be needed following surgical resection.  Based on the size of the lesion, we would like treat to 20 Gy using a frameless approach.'  where abbr='srsplan';

# 2022-04-21 11:12:05.213951
+.q

# 2022-04-21 11:12:09.893522
+commit

# 2022-04-21 11:12:12.969730
+quit

# 2022-04-21 11:13:04.692154
+select * from phrase where abbr='srsplan';

# 2022-04-21 11:13:26.194332
+.q

# 2022-04-21 11:13:27.910773
+exit

# 2022-05-22 10:20:08.484507
+open db.sqlite3

# 2022-05-22 10:20:13.552612
+connect db.sqlite3

# 2022-05-22 10:20:14.398902
+.q

# 2022-05-22 10:20:24.923885
+select * from disease_site;

# 2022-05-22 18:58:28.559062
+select * from patient;

# 2022-05-22 18:58:30.823518
+select * from patients;

# 2022-05-22 18:58:41.640779
+select * from patients_patient;

# 2022-05-23 17:59:36.332658
+select * from disease_site;

# 2022-05-23 17:59:38.404324
+select * from disease_site2;

# 2022-05-23 17:59:42.703912
+select * from disease_site;

# 2022-05-23 18:32:00.710010
+.schema

# 2022-05-23 18:32:03.687004
+.schema

# 2022-05-23 18:32:05.055179
+.q

# 2022-05-23 18:32:07.994176
+ls

# 2022-05-23 18:32:09.062839
+.q

# 2022-05-23 18:32:09.564445
+;

# 2022-05-23 18:32:12.196728
+.q

# 2022-05-23 18:32:14.041962
+exit

# 2022-05-23 18:32:48.378321
+.q

# 2022-05-23 18:32:49.703940
+;q

# 2022-05-23 18:33:03.654219
+;

# 2022-05-23 18:33:22.542414
+.schema

# 2022-05-23 18:33:28.317003
+describe patients_patient;

# 2022-05-23 18:34:05.482445
+.q

# 2022-05-23 18:34:07.126823
+;q

# 2022-05-23 18:34:08.142322
+exit

# 2022-05-23 18:34:45.174726
+select * from patients_patient;

# 2022-05-23 18:34:50.598052
+delete from patients_patient;

# 2022-05-23 18:34:53.640062
+exit

# 2022-05-23 22:50:10.968481
+select * from patient_status;

# 2022-05-23 22:50:25.239691
+select id, descr from patient_status;

# 2022-05-23 22:50:31.348858
+.mode csv

# 2022-05-23 22:50:32.578767
+select id, descr from patient_status;

# 2022-05-23 22:58:20.859749
+patient_status;q

# 2022-05-23 22:58:21.516753
+.q

# 2022-05-23 22:58:22.239319
+;

# 2022-05-23 22:58:23.342921
+exit

# 2022-05-23 23:26:15.696314
+select * from hospital;

# 2022-05-23 23:26:20.903266
+describe hospital;

# 2022-05-23 23:28:33.272855
+insert into hospital (id, name) values (1, 'University of Chicago')

# 2022-05-23 23:28:37.926948
+describe hospital;

# 2022-05-23 23:28:39.556799
+select * from hospital;

# 2022-05-23 23:28:41.253360
+.q

# 2022-05-23 23:28:42.992975
+exit

# 2022-05-24 17:44:12.559127
+select disease_site from patient where attending=2;

# 2022-05-24 17:44:15.465064
+select disease_site from patient;

# 2022-05-24 17:44:17.837221
+select disease_site_2 from patient;

# 2022-05-24 17:44:27.902614
+select treatment_category, disease_site_2 from patient;

# 2022-05-24 17:45:04.020723
+select disease_site_2 from patient;

# 2022-05-24 17:45:06.508473
+select treatment_category, disease_site_2 from patient;

# 2022-05-24 18:08:29.378946
+select treatment_category, disease_site from patient;

# 2022-05-24 18:08:32.466010
+.q

# 2022-05-24 18:08:54.310597
+update patient set treatment_category = 1, disease_site_2=1;

# 2022-05-24 18:09:11.593469
+select treatment_category, disease_site from patient;

# 2022-05-24 18:09:14.340808
+select treatment_category, disease_site_2 from patient;

# 2022-05-24 18:09:17.930453
+update patient set treatment_category = 1, disease_site_2=1;

# 2022-05-24 18:09:19.418267
+.q

# 2022-05-24 18:09:20.876555
+;q

# 2022-05-24 18:09:50.532539
+exit

# 2022-05-24 18:50:54.860529
+select * from patiets;

# 2022-05-24 18:50:58.848676
+select * from patients;

# 2022-05-24 18:51:02.880353
+select * from patient;

# 2022-05-24 18:51:11.724954
+select disease_site from patient;

# 2022-05-24 18:55:00.052180
+.q

# 2022-05-24 20:59:00.323982
+select disease_site, treatment_category from patient;

# 2022-05-25 01:21:17.654958
+select * from event;

# 2022-05-25 01:21:19.888713
+select * from events;

# 2022-05-25 01:21:36.351617
+.schema

# 2022-05-25 01:21:45.006230
+describe *

# 2022-05-25 01:21:49.556044
+schema

# 2022-05-25 01:21:50.491066
+.q

# 2022-05-25 01:21:52.298633
+;

# 2022-05-25 01:21:53.656673
+exit

# 2022-05-25 01:22:36.184849
+select * from visit;

# 2022-05-25 01:24:34.032162
+.q

# 2022-05-25 01:24:35.135224
+;q

# 2022-05-25 01:24:35.921095
+q

# 2022-05-25 01:24:38.280177
+quit

# 2022-05-25 06:47:36.138429
+select * from `ImagingProtocol`

# 2022-05-25 06:47:48.392090
+select * from `Treatment`;

# 2022-05-25 06:47:53.048695
+select * from Target

# 2022-05-25 06:48:06.583164
+select respiratory_management from `Target`

# 2022-05-25 06:48:24.294816
+update patient set respiratory_management = 40;

# 2022-05-25 06:48:32.923811
+update `Target` set respiratory_management = 40;

# 2022-05-25 06:48:35.198310
+update patient set respiratory_management = 40;

# 2022-05-25 06:48:53.567553
+select * from `Treatment`;

# 2022-05-25 06:48:57.067324
+.schema

# 2022-05-25 06:49:04.210733
+describe `Treatment`

# 2022-05-25 06:49:19.015731
+select patient, referred-by_id, consult, end, start, sim from Treatment;

# 2022-05-25 06:49:25.368558
+select patient, referred_by_id, consult, end, start, sim from Treatment;

# 2022-05-25 06:49:39.943620
+describe Target;

# 2022-05-25 06:49:43.658774
+describe `Target`

# 2022-05-25 06:49:50.924017
+describe `Target`;

# 2022-05-25 06:49:55.833267
+describe `Target`

# 2022-05-25 06:50:03.401621
+.schema `Target`]

# 2022-05-25 20:37:26.595929
+.help

# 2022-05-25 20:37:28.306250
+help

# 2022-05-25 20:37:30.384224
+.?

# 2022-05-25 20:37:32.642721
+.schema

# 2022-05-25 20:37:43.383322
+describe Target

# 2022-05-25 20:37:48.903069
+describe Treatment

# 2022-05-25 20:38:02.221540
+index;

# 2022-05-25 20:38:10.445209
+.schema

# 2022-05-27 18:30:33.736453
+ select x, 548-x from (select min(iif(pow<n, 548-n, 548)) as x from powers);

# 2022-05-27 18:30:59.481432
+create table pow(n int, pow int, vals json);

# 2022-05-27 18:31:03.618481
+.q

# 2022-05-27 18:31:04.687519
+;q

# 2022-05-27 18:31:08.711123
+exit

# 2022-05-27 18:31:19.013811
+create table pow(n int, pow int, vals json);

# 2022-05-27 18:31:50.410815
+with recursive power(n, p) as

# 2022-05-27 18:33:07.188622
+with recursive power(n, p) as (
+select 63, 4611686018427387904 union all
+select n-1, p/2 from power where n > 1;

# 2022-05-27 18:33:15.042386
+with recursive power(n, p) as (
+select 63, 4611686018427387904 union all
+select n-1, p/2 from power where n > 1)
+select * from power;

# 2022-05-27 18:38:43.780563
+with recursive power(n, p, val, arr) as (
+select 63, 4611686018427387904, 513, json_array() union all
+select n-1, p/2, iif(val-p<0, val, val-p), iif(val-p<0, arr, json_insert(arr, '$[#]', p))  from power where n > 1)
+select * from power;

# 2022-05-27 18:38:58.917277
+with recursive power(n, p, val, arr) as (
+select 63, 4611686018427387904, 513, json_array() union all
+select n-1, p/2, iif(val-p<0, val, val-p), iif(val-p<0, arr, json_insert(arr, '$[#]', p))  from power where n > 0)
+select * from power;

# 2022-05-27 18:40:19.478134
+with recursive power(n, p, val, squares, roots) as (
+select 63, 4611686018427387904, 513, json_array(), json_array() union all
+select n-1, p/2, iif(val-p<0, val, val-p), iif(val-p<0, squares, json_insert(squares, '$[#]', p)), iif(val-p<0, roots, json_insert(roots, '$[#]', n)  from power where n > 0)
+select * from power;

# 2022-05-27 18:40:32.765986
+with recursive power(n, p, val, squares, roots) as (
+select 63, 4611686018427387904, 513, json_array(), json_array() union all
+select n-1, p/2, iif(val-p<0, val, val-p), iif(val-p<0, squares, json_insert(squares, '$[#]', p)), iif(val-p<0, roots, json_insert(roots, '$[#]', n))  from power where n > 0)
+select * from power;

# 2022-05-27 18:40:49.037382
+with recursive power(n, p, val, squares, roots) as (
+select 63, 4611686018427387904, 513, json_array(), json_array() union all
+select n-1, p/2, iif(val-p<0, val, val-p), iif(val-p<0, squares, json_insert(squares, '$[#]', p)), iif(val-p<0, roots, json_insert(roots, '$[#]', n-1))  from power where n > 0)
+select * from power;

# 2022-05-27 18:41:15.926538
+select 4294967296 + 131072 + 64
+;

# 2022-05-27 18:41:27.142555
+with recursive power(n, p, val, squares, roots) as (
+select 63, 4611686018427387904, 4295098432, json_array(), json_array() union all
+select n-1, p/2, iif(val-p<0, val, val-p), iif(val-p<0, squares, json_insert(squares, '$[#]', p)), iif(val-p<0, roots, json_insert(roots, '$[#]', n-1))  from power where n > 0)
+select * from power;

# 2022-05-27 18:49:32.749272
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array(), UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(val > p, val, val-p),
+                iif(val-p<0, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE N > 0)
+         SELECT * FROM power;
+

# 2022-05-27 18:49:48.800693
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(val > p, val, val-p),
+                iif(val-p<0, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE N > 0)
+         SELECT * FROM power;
+

# 2022-05-27 18:50:46.123952
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p>val, val, val-p),
+                iif(val-p<0, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE N > 0)
+         SELECT * FROM power;
+

# 2022-05-27 18:51:06.382052
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p > val, val, val-p),
+                iif(p > val, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE n > 0)
+         SELECT * FROM power;
+

# 2022-05-27 18:55:20.051412
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p > val, val, val-p),
+                iif(p > val, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE n > 0)
+         SELECT * FROM power;

# 2022-05-27 18:55:27.594729
+.help

# 2022-05-27 18:55:29.392513
+help

# 2022-05-27 18:55:40.351343
+.tables

# 2022-05-27 18:55:43.941812
+\G

# 2022-05-27 18:55:49.010140
+..q

# 2022-05-27 19:02:15.002560
+.schema

# 2022-05-27 19:02:22.650125
+\f

# 2022-05-27 19:02:25.020532
+\fs

# 2022-05-27 19:02:51.110385
+\fs powers WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p > val, val, val-p),
+                iif(p > val, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE n > 0)
+         SELECT * FROM power;

# 2022-05-27 19:02:54.541589
+\f powers

# 2022-05-27 19:02:57.397416
+\fd

# 2022-05-27 19:03:01.510826
+\h

# 2022-05-27 19:03:03.155307
+\?

# 2022-05-27 19:03:18.403464
+.exit

# 2022-05-27 19:49:26.334735
+\fs powers WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p > val, val, val-p),
+                iif(p > val, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE n > 0)
+         SELECT * FROM power;

# 2022-05-27 19:49:31.604485
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p > val, val, val-p),
+                iif(p > val, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE n > 0)
+         SELECT * FROM power;

# 2022-05-27 19:49:45.476112
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p > val, val, val-p),
+                iif(p > val, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE n > 0)
+         SELECT roots from pow;

# 2022-05-27 19:49:51.724522
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p > val, val, val-p),
+                iif(p > val, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE n > 0)
+         SELECT roots from power where n = 0;

# 2022-05-27 19:51:33.746679
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p > val, val, val-p),
+                iif(p > val, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE n > 0)
+         SELECT * from power, json_each(power.roots) where n = 0;

# 2022-05-27 19:52:05.356593
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p > val, val, val-p),
+                iif(p > val, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE n > 0)
+         select count(*) from (SELECT * from power, json_each(power.roots) where n = 0) where value=32;

# 2022-05-27 19:52:08.167837
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p > val, val, val-p),
+                iif(p > val, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE n > 0)
+         select count(*) from (SELECT * from power, json_each(power.roots) where n = 0) where value=33;

# 2022-05-27 19:52:11.418158
+WITH RECURSIVE power(n, p, val, roots) as (
+         SELECT 63, 4611686018427387904, 4295098432, json_array() UNION ALL
+         SELECT n-1,
+                p/2,
+                iif(p > val, val, val-p),
+                iif(p > val, roots, json_insert(roots, '$[#]', n-1))
+         FROM power WHERE n > 0)
+         select count(*) from (SELECT * from power, json_each(power.roots) where n = 0) where value=32;

# 2022-05-27 20:06:24.625198
+select instr("abc", "a")

# 2022-05-27 20:06:28.755373
+select instr("abc", "d")

# 2022-05-27 20:06:30.931551
+select instr("abcd", "d")

# 2022-05-27 20:06:35.454269
+select instr("a", "abcdd")

# 2022-05-27 20:06:58.804501
+SELECT CAST(1, "TEXT")

# 2022-05-27 20:07:42.648007
+SELECT CAST('123' as json)

# 2022-05-27 20:07:49.425207
+SELECT CAST('[123]' as json)

# 2022-05-27 20:07:56.541785
+SELECT CAST(123 as json)

# 2022-05-27 20:08:03.902357
+SELECT CAST(123 as text)

# 2022-05-27 20:08:07.827537
+SELECT CAST(bool as text)

# 2022-05-27 20:08:16.896541
+SELECT CAST(1 as real);'

# 2022-05-27 20:08:18.978532
+SELECT CAST(1 as real);

# 2022-05-27 20:10:09.202025
+SELECT "patient"."id", "patient"."lname", "patient"."fname", "patient"."mrn", "patient"."dob", "patient"."sex", "patient"."acgme", "patient"."disease_site", "patient"."treatment_category", "patient"."intent", "patient"."hospital", "patient"."patient_status", "patient"."attending", "patient"."diagnosis", "patient"."summary_line", "patient"."chart_rounds_text", "patient"."notes", "patient"."plan", "patient"."chemo", "patient"."active_service", "patient"."contours_complete", "patient"."plan_eval_complete", "patient"."chart_rounds_complete", "patient"."completion_summary_complete" FROM "patient" WHERE
+          select count(*) from ( WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    "patient"."disease_site",
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT count(*) from (
+                SELECT * from power, json_each(power.roots) where n = 0) where value = ?
+                ))  LIMIT 21 = 1

# 2022-05-27 20:10:46.360394
+            WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    "patient"."disease_site",
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT count(*) from (
+                SELECT * from power, json_each(power.roots) where n = 0) where value = ?
+                )

# 2022-05-27 20:10:48.769869
+            WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    "patient"."disease_site",
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT count(*) from (
+                SELECT * from power, json_each(power.roots) where n = 0) where value = ?
+

# 2022-05-27 20:10:53.653197
+;

# 2022-05-27 20:10:55.812843
+            WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    "patient"."disease_site",
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT count(*) from (
+                SELECT * from power, json_each(power.roots) where n = 0) where value = ?
+                );

# 2022-05-27 20:11:29.742803
+            WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    33,$d$CUME_DIST
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT count(*) from (
+                SELECT * from power, json_each(power.roots) where n = 0) where value = 5
+                );

# 2022-05-27 20:11:37.590257
+            WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    33,
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT count(*) from (
+                SELECT * from power, json_each(power.roots) where n = 0) where value = 5
+                );

# 2022-05-27 20:11:58.670978
+            WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    33,
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT count(*) from (
+                SELECT * from power, json_each(power.roots) where n = 0)
+                );

# 2022-05-27 20:12:02.248899
+            WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    33,
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT count(*) from (
+                SELECT * from power, json_each(power.roots) where n = 0)
+

# 2022-05-27 20:12:22.338856
+            WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    33,
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT count(*) from (
+                SELECT * from power, json_each(power.roots) where n = 0)

# 2022-05-27 20:12:33.631540
+            WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    33,
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT * from (
+                SELECT * from power, json_each(power.roots) where n = 0)

# 2022-05-27 20:12:50.045447
+            WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    33,
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT count(value) from (
+                SELECT * from power, json_each(power.roots) where n = 0 and value = 5)

# 2022-05-27 20:12:52.527968
+            WITH RECURSIVE power(n, p, val, roots) AS (
+                SELECT
+                    63,
+                    4611686018427387904,
+                    33,
+                    json_array() UNION ALL
+                SELECT
+                    n - 1,
+                    p / 2,
+                    iif(p > val, val, val - p),
+                    iif(p > val, roots, json_insert(roots, '$[#]', n - 1))
+                FROM power WHERE n > 0
+            )
+            SELECT count(value) from (
+                SELECT * from power, json_each(power.roots) where n = 0 and value = 4)
